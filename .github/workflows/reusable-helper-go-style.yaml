# Copyright 2020 The Knative Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Code Style

on:
  workflow_call: {}

jobs:

  autoformat:
    name: Auto-format and Check
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go
        uses: knative/actions/setup-go@main

      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          cd "$(mktemp -d)"
          go install golang.org/x/tools/cmd/goimports@latest

      - name: goimports
        shell: bash
        run: >
          goimports -w
          $(find .
          -path '*/vendor/*' -prune
          -o -path '*/third_party/*' -prune
          -o -name '*.pb.go' -prune
          -o -name 'wire_gen.go' -prune
          -o -type f -name '*.go' -print)

      - name: Verify goimports
        shell: bash
        run: |
          # From: https://backreference.org/2009/12/23/how-to-match-newlines-in-sed/
          # This is to leverage this workaround:
          # https://github.com/actions/toolkit/issues/193#issuecomment-605394935
          function urlencode() {
            sed ':begin;$!N;s/\n/%0A/;tbegin'
          }
          if [[ $(git diff-index --name-only HEAD --) ]]; then
              for x in $(git diff-index --name-only HEAD --); do
                echo "::error file=$x::Please run goimports.%0A$(git diff "$x" | urlencode)"
              done
              echo "${{ github.repository }} is out of style. Please run goimports."
              exit 1
          fi
          echo "${{ github.repository }} is formatted correctly."

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Set up Go
        uses: knative/actions/setup-go@main

      - name: Check out code
        uses: actions/checkout@v4

      - id: golangci_configuration
        uses: andstor/file-existence-action@v3
        with:
          files: .golangci.yaml
      - name: Go Lint
        if: steps.golangci_configuration.outputs.files_exists == 'true'
        uses: golangci/golangci-lint-action@v5
        with:
          only-new-issues: true
          version: v1.55.2
          args: --go=1.21

      - name: Install Tools
        if: ${{ always() }}
        env:
          WOKE_VERSION: v0.13.0
        run: |
          TEMP_PATH="$(mktemp -d)"
          cd "$TEMP_PATH"

          echo '::group::üê∂ Installing reviewdog ... https://github.com/reviewdog/reviewdog'
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b "${TEMP_PATH}" 2>&1
          echo '::endgroup::'

          echo '::group:: Installing misspell ... https://github.com/client9/misspell'
          curl -sfL https://raw.githubusercontent.com/client9/misspell/master/install-misspell.sh | sh -s -- -b "${TEMP_PATH}" 2>&1
          echo '::endgroup::'

          echo '::group:: Installing woke ... https://github.com/get-woke/woke'
          curl -sfL https://raw.githubusercontent.com/get-woke/woke/main/install.sh | sh -s -- -b "${TEMP_PATH}" "${WOKE_VERSION}" 2>&1
          echo '::endgroup::'

          echo "${TEMP_PATH}" >> "$GITHUB_PATH"

      - name: misspell
        shell: bash
        if: ${{ always() }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: |
          set -e
          cd "${GITHUB_WORKSPACE}" || exit 1

          echo '::group:: Running github.com/client9/misspell with reviewdog üê∂ ...'
          # Don't fail because of misspell
          set +o pipefail
          # Exclude generated and vendored files, plus some legacy
          # paths until we update all .gitattributes
          git ls-files |
          git check-attr --stdin linguist-generated | grep -Ev ': (set|true)$' | cut -d: -f1 |
          git check-attr --stdin linguist-vendored | grep -Ev ': (set|true)$' | cut -d: -f1 |
          git check-attr --stdin ignore-lint | grep -Ev ': (set|true)$' | cut -d: -f1 |
          grep -Ev '(vendor/|third_party/|.git)' |
          grep -v '\.svg$' |
          xargs misspell -i importas -error |
          reviewdog -efm="%f:%l:%c: %m" \
                -name="github.com/client9/misspell" \
                -reporter="github-pr-check" \
                -filter-mode="added" \
                -fail-on-error="true" \
                -level="error"

          echo '::endgroup::'

      - name: trailing whitespace
        shell: bash
        if: ${{ always() }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: |
          set -e
          cd "${GITHUB_WORKSPACE}" || exit 1

          echo '::group:: Flagging trailing whitespace with reviewdog üê∂ ...'
          # Don't fail because of grep
          set +o pipefail

          # Exclude generated and vendored files, plus some legacy
          # paths until we update all .gitattributes
          git ls-files |
          git check-attr --stdin linguist-generated | grep -Ev ': (set|true)$' | cut -d: -f1 |
          git check-attr --stdin linguist-vendored | grep -Ev ': (set|true)$' | cut -d: -f1 |
          git check-attr --stdin ignore-lint | grep -Ev ': (set|true)$' | cut -d: -f1 |
          grep -Ev '(vendor/|third_party/|.git)' |
          grep -v '\.svg$' |
          xargs grep -nE " +$" |
          reviewdog -efm="%f:%l:%m" \
                -name="trailing whitespace" \
                -reporter="github-pr-check" \
                -filter-mode="added" \
                -fail-on-error="true" \
                -level="error"

          echo '::endgroup::'

      - name: EOF newline
        shell: bash
        if: ${{ always() }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: |
          set -e
          cd "${GITHUB_WORKSPACE}" || exit 1

          echo '::group:: Flagging missing EOF newlines with reviewdog üê∂ ...'
          # Don't fail because of misspell
          set +o pipefail
          # Lint exclude rule:
          #  - nothing in vendor/
          #  - nothing in third_party
          #  - nothing in .git/
          #  - no *.ai (Adobe Illustrator) files.
          LINT_FILES=$(git ls-files |
          git check-attr --stdin linguist-generated | grep -Ev ': (set|true)$' | cut -d: -f1 |
          git check-attr --stdin linguist-vendored | grep -Ev ': (set|true)$' | cut -d: -f1 |
          git check-attr --stdin ignore-lint | grep -Ev ': (set|true)$' | cut -d: -f1 |
          grep -Ev '(vendor/|third_party/|.git)' |
          grep -v '\.ai$' |
          grep -v '\.svg$')

          for x in $LINT_FILES; do
            # Based on https://stackoverflow.com/questions/34943632/linux-check-if-there-is-an-empty-line-at-the-end-of-a-file
            if [[ -f $x && ! ( -s "$x" && -z "$(tail -c 1 "$x")" ) ]]; then
              # We add 1 to `wc -l` here because of this limitation (from the man page):
              # Characters beyond the final <newline> character will not be included in the line count.
              echo "$x:$((1 + $(wc -l "$x" | tr -s ' ' | cut -d' ' -f 1))): Missing newline"
            fi
          done |
          reviewdog -efm="%f:%l: %m" \
                -name="EOF Newline" \
                -reporter="github-pr-check" \
                -filter-mode="added" \
                -fail-on-error="true" \
                -level="error"

          echo '::endgroup::'

      # This is mostly copied from https://github.com/get-woke/woke-action-reviewdog/blob/main/entrypoint.sh
      # since their action is not yet released under a stable version.
      - name: Language
        if: ${{ always() && github.event_name == 'pull_request' }}
        shell: bash
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: |
          set -e
          cd "${GITHUB_WORKSPACE}" || exit 1

          # Create a minimal .wokeignore if none already exist.
          if [ ! -f .wokeignore ]; then
            cat > .wokeignore <<EOF
            vendor/*
            third_party/*
            *.svg
          EOF
          fi

          echo '::group:: Running woke with reviewdog üê∂ ...'
          woke --output simple \
            | reviewdog -efm="%f:%l:%c: %m" \
                -name="woke" \
                -reporter="github-pr-check" \
                -filter-mode="added" \
                -fail-on-error="true" \
                -level="error"
          echo '::endgroup::'

  donotsubmit:
    name: Do Not Submit
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Do Not Submit
        shell: bash
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: |
          set -e
          cd "${GITHUB_WORKSPACE}" || exit 1

          TEMP_PATH="$(mktemp -d)"
          PATH="${TEMP_PATH}:$PATH"

          echo '::group::üê∂ Installing reviewdog ... https://github.com/reviewdog/reviewdog'
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b "${TEMP_PATH}" 2>&1
          echo '::endgroup::'

          echo '::group:: Running DO NOT SUBMIT with reviewdog üê∂ ...'
          # Don't fail because of grep
          set +o pipefail
          find . -type f \
            -not -path '*/vendor/*' \
            -not -path '*/third_party/*' \
            -not -path '*/.git/*' \
            -not -path '*/.github/workflows/*' \
            | xargs -r grep -n "DO NOT SUBMIT" \
            | reviewdog -efm="%f:%l:%m" \
                -name="DO NOT SUBMIT" \
                -reporter="github-pr-check" \
                -filter-mode="added" \
                -fail-on-error="true" \
                -level="error"

          echo '::endgroup::'

  check:
    name: Boilerplate Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        extension:
        - go
        - sh

        # Map between extension and human-readable name.
        include:
        - extension: go
          language: Go
        - extension: sh
          language: Bash

    steps:

      - name: Set up Go
        uses: knative/actions/setup-go@main

      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Tools
        run: |
          TEMP_PATH="$(mktemp -d)"
          cd "$TEMP_PATH"

          echo '::group::üê∂ Installing reviewdog ... https://github.com/reviewdog/reviewdog'
          curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b "${TEMP_PATH}" 2>&1
          echo '::endgroup::'

          echo '::group:: Installing boilerplate-check ... https://github.com/mattmoor/boilerplate-check'
          go install github.com/mattmoor/boilerplate-check/cmd/boilerplate-check@latest
          echo '::endgroup::'

          echo "${TEMP_PATH}" >> "$GITHUB_PATH"

      - id: boilerplate_txt
        uses: andstor/file-existence-action@v3
        with:
          files: ./hack/boilerplate/boilerplate.${{ matrix.extension }}.txt
      - name: ${{ matrix.language }} license boilerplate
        shell: bash
        if: ${{ steps.boilerplate_txt.outputs.files_exists == 'true' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: |
          set -e
          cd "${GITHUB_WORKSPACE}" || exit 1

          echo '::group:: Running github.com/mattmoor/boilerplate-check for ${{ matrix.language }} with reviewdog üê∂ ...'
          # Don't fail because of boilerplate-check
          set +o pipefail
          boilerplate-check check \
            --boilerplate ./hack/boilerplate/boilerplate.${{ matrix.extension }}.txt \
            --file-extension ${{ matrix.extension }} \
            --exclude "(vendor|third_party)/" |
          reviewdog -efm="%A%f:%l: %m" \
                -efm="%C%.%#" \
                -name="${{ matrix.language }} headers" \
                -reporter="github-pr-check" \
                -filter-mode="diff_context" \
                -fail-on-error="true" \
                -level="error"
          echo '::endgroup::'
